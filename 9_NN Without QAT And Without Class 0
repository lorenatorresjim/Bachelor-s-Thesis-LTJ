##### SCRIPT FOR THE NN WITHOUT QAT AND WITHOUT CLASS 0 
 
import pandas as pd 
import numpy as np 
import tensorflow as tf 
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import LabelEncoder 
from tensorflow.keras.utils import to_categorical 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense 
from sklearn.metrics import classification_report, confusion_matrix 
import seaborn as sns 
import matplotlib.pyplot as plt 
 
#Load the file 
data = pd.read_csv(r"C:\Users\loren\Downloads\TFG MITBIH 
TRAIN\normalized_data.csv") 
 
# Filter for excluding rows with 'Etiqueta' equal to 0 
data = data[data["Etiqueta"] != 0] 
features = data[["Intervalos PR", "Intervalos QRS", "Intervalos QT"]] 
labels = data["Etiqueta"] 
 
# Codify labels using LabelEncoder 
encoder = LabelEncoder() 
labels_encoded = encoder.fit_transform(labels) 
 
# One-hot encoding for classification 
labels_categorical = to_categorical(labels_encoded) 
 
# Divide between training and test 
X_train, X_test, y_train, y_test = train_test_split(features, 
labels_categorical, test_size=0.2, random_state=42) 
 
# Define the NN 
model = Sequential() 
model.add(Dense(16, input_shape=(3,), activation='relu')) 
model.add(Dense(8, activation='relu')) 
model.add(Dense(labels_categorical.shape[1], activation='softmax'))   
 
# Compile the model 
model.compile(optimizer='adam', loss='categorical_crossentropy', 
metrics=['accuracy']) 
 
# Train the model 
model.fit(X_train, y_train, epochs=50, batch_size=16, 
validation_split=0.2) 
 
# Evaluate the model 
loss, accuracy = model.evaluate(X_test, y_test) 
print(f"\nPrecision in test:{accuracy:.4f}") 
 
# Predict the labels 
y_pred_probs = model.predict(X_test) 
y_pred = np.argmax(y_pred_probs, axis=1) 
y_true = np.argmax(y_test, axis=1) 
 
# Classification report 
print("\nClassification Report:") 
print(classification_report(y_true, y_pred, target_names=[str(c) for c 
in encoder.classes_])) 
 
# Confusion matrix 
cm = confusion_matrix(y_true, y_pred) 
plt.figure(figsize=(8, 6)) 
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', 
xticklabels=encoder.classes_, yticklabels=encoder.classes_) 
plt.xlabel('Predicted Label') 
plt.ylabel('True Label') 
plt.title('Confusion Matrix') 
plt.show() 
 
# Save the model 
model.save(r"C:\Users\loren\Downloads\TFG MITBIH 
TRAIN\model_intervals_without0.h5") 
print("Modelo guardado como 'model_intervals_without0.h5'") 
